var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || !1,
            descriptor.configurable = !0,
            "value"in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor)
        }
    }
    return function(Constructor, protoProps, staticProps) {
        return protoProps && defineProperties(Constructor.prototype, protoProps),
        staticProps && defineProperties(Constructor, staticProps),
        Constructor
    }
}();
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor))
        throw new TypeError("Cannot call a class as a function")
}
var TextScramble = function() {
    function TextScramble(el) {
        _classCallCheck(this, TextScramble),
        this.el = el,
        this.chars = "!<>-_\\/[]{}@€”=+*^?#________",
        this.update = this.update.bind(this)
    }
    return _createClass(TextScramble, [{
        key: "setText",
        value: function setText(newText) {
            var _this = this
              , oldText = this.el.innerText
              , length = Math.max(oldText.length, newText.length)
              , promise = new Promise((function(resolve) {
                return _this.resolve = resolve
            }
            ));
            this.queue = [];
            for (var i = 0; i < length; i++) {
                var from = oldText[i] || ""
                  , to = newText[i] || ""
                  , start = Math.floor(40 * Math.random())
                  , end = start + Math.floor(40 * Math.random());
                this.queue.push({
                    from: from,
                    to: to,
                    start: start,
                    end: end
                })
            }
            return cancelAnimationFrame(this.frameRequest),
            this.frame = 0,
            this.update(),
            promise
        }
    }, {
        key: "update",
        value: function update() {
            for (var output = "", complete = 0, i = 0, n = this.queue.length; i < n; i++) {
                var _queue$i = this.queue[i]
                  , from = _queue$i.from
                  , to = _queue$i.to
                  , start = _queue$i.start
                  , end = _queue$i.end
                  , char = _queue$i.char;
                this.frame >= end ? (complete++,
                output += to) : this.frame >= start ? ((!char || Math.random() < .28) && (char = this.randomChar(),
                this.queue[i].char = char),
                output += '<span class="dud">' + char + "</span>") : output += from
            }
            this.el.innerHTML = output,
            complete === this.queue.length ? this.resolve() : (this.frameRequest = requestAnimationFrame(this.update),
            this.frame++)
        }
    }, {
        key: "randomChar",
        value: function randomChar() {
            return this.chars[Math.floor(Math.random() * this.chars.length)]
        }
    }]),
    TextScramble
}()
  , phrases = ["Hi There!", "Welcome!", "Well, How A U?", "Click links"]
  , el = document.querySelector(".text")
  , fx = new TextScramble(el)
  , counter = 0
  , next = function next() {
    fx.setText(phrases[counter]).then((function() {
        setTimeout(next, 2500)
    }
    )),
    counter = (counter + 1) % phrases.length
};
next();
